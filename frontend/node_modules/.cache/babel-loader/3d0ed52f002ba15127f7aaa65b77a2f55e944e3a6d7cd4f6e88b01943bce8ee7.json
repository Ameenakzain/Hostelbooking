{"ast":null,"code":"require(\"dotenv\").config();\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst bodyParser = require(\"body-parser\");\nconst app = express();\n//Middleware\napp.use(express.json());\napp.use(bodyParser.json());\napp.use(express.urlencoded({\n  extended: true\n}));\napp.use(cors({\n  origin: \"http://localhost:3000\",\n  // ✅ Allow frontend running on 3001 to access the backend\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n  credentials: true\n}));\napp.use(\"/uploads\", express.static(path.join(__dirname, \"uploads\")));\n\n// ✅ Ensure \"uploads\" folder exists\nconst uploadDir = path.join(__dirname, \"uploads\");\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir);\n  console.log(\"📂 'uploads' folder created.\");\n}\n\n// 🔗 Connect to MongoDB\nmongoose.connect(process.env.ConnectionString).then(() => console.log(\"✅ MongoDB Connected Successfully\")).catch(err => console.log(\"❌ MongoDB Connection Error:\", err));\nconst OwnerRoutes = require(\"./routes/OwnerRoutes\");\napp.use(\"/api/owners\", OwnerRoutes); // Mount the routes for handling owner-related requests\n\nconst userRoutes = require(\"./routes/userRoutes\"); // Ensure this path is correct\napp.use(\"/api/users\", userRoutes); // Mount user-related routes\n\n// 📌 Sample Route\napp.get(\"/\", (req, res) => {\n  res.send(\"Welcome to Hostel Booking API!\");\n});\n\n// Start Server\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`🚀 Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["require","config","express","mongoose","cors","fs","path","bodyParser","app","use","json","urlencoded","extended","origin","methods","credentials","static","join","__dirname","uploadDir","existsSync","mkdirSync","console","log","connect","process","env","ConnectionString","then","catch","err","OwnerRoutes","userRoutes","get","req","res","send","PORT","listen"],"sources":["C:/Users/DELL/Desktop/Bookmyhostel/frontend/src/components/Login.jsx"],"sourcesContent":["require(\"dotenv\").config();\r\nconst express = require(\"express\");\r\n\r\nconst mongoose = require(\"mongoose\");\r\nconst cors = require(\"cors\");\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst app = express();\r\n//Middleware\r\napp.use(express.json());\r\napp.use(bodyParser.json());\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(cors({\r\n  origin: \"http://localhost:3000\",  // ✅ Allow frontend running on 3001 to access the backend\r\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\r\n  credentials: true\r\n}));\r\n\r\napp.use(\"/uploads\", express.static(path.join(__dirname, \"uploads\")));\r\n\r\n\r\n// ✅ Ensure \"uploads\" folder exists\r\nconst uploadDir = path.join(__dirname, \"uploads\");\r\nif (!fs.existsSync(uploadDir)) {\r\n  fs.mkdirSync(uploadDir);\r\n  console.log(\"📂 'uploads' folder created.\");\r\n}\r\n\r\n// 🔗 Connect to MongoDB\r\nmongoose.connect(process.env.ConnectionString)\r\n.then(() => console.log(\"✅ MongoDB Connected Successfully\"))\r\n.catch(err => console.log(\"❌ MongoDB Connection Error:\", err));\r\n\r\nconst OwnerRoutes = require(\"./routes/OwnerRoutes\");\r\napp.use(\"/api/owners\", OwnerRoutes); // Mount the routes for handling owner-related requests\r\n\r\nconst userRoutes = require(\"./routes/userRoutes\"); // Ensure this path is correct\r\napp.use(\"/api/users\", userRoutes); // Mount user-related routes\r\n\r\n// 📌 Sample Route\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"Welcome to Hostel Booking API!\");\r\n});\r\n\r\n// Start Server\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`🚀 Server is running on port ${PORT}`);\r\n});\r\n"],"mappings":"AAAAA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;AAC1B,MAAMC,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAElC,MAAMG,QAAQ,GAAGH,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMK,EAAE,GAAGL,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMM,IAAI,GAAGN,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMO,UAAU,GAAGP,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMQ,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrB;AACAM,GAAG,CAACC,GAAG,CAACP,OAAO,CAACQ,IAAI,CAAC,CAAC,CAAC;AACvBF,GAAG,CAACC,GAAG,CAACF,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;AAC1BF,GAAG,CAACC,GAAG,CAACP,OAAO,CAACS,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;AAC/CJ,GAAG,CAACC,GAAG,CAACL,IAAI,CAAC;EACXS,MAAM,EAAE,uBAAuB;EAAG;EAClCC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC;EACzCC,WAAW,EAAE;AACf,CAAC,CAAC,CAAC;AAEHP,GAAG,CAACC,GAAG,CAAC,UAAU,EAAEP,OAAO,CAACc,MAAM,CAACV,IAAI,CAACW,IAAI,CAACC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;;AAGpE;AACA,MAAMC,SAAS,GAAGb,IAAI,CAACW,IAAI,CAACC,SAAS,EAAE,SAAS,CAAC;AACjD,IAAI,CAACb,EAAE,CAACe,UAAU,CAACD,SAAS,CAAC,EAAE;EAC7Bd,EAAE,CAACgB,SAAS,CAACF,SAAS,CAAC;EACvBG,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;AAC7C;;AAEA;AACApB,QAAQ,CAACqB,OAAO,CAACC,OAAO,CAACC,GAAG,CAACC,gBAAgB,CAAC,CAC7CC,IAAI,CAAC,MAAMN,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CAAC,CAC3DM,KAAK,CAACC,GAAG,IAAIR,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEO,GAAG,CAAC,CAAC;AAE9D,MAAMC,WAAW,GAAG/B,OAAO,CAAC,sBAAsB,CAAC;AACnDQ,GAAG,CAACC,GAAG,CAAC,aAAa,EAAEsB,WAAW,CAAC,CAAC,CAAC;;AAErC,MAAMC,UAAU,GAAGhC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC;AACnDQ,GAAG,CAACC,GAAG,CAAC,YAAY,EAAEuB,UAAU,CAAC,CAAC,CAAC;;AAEnC;AACAxB,GAAG,CAACyB,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACzBA,GAAG,CAACC,IAAI,CAAC,gCAAgC,CAAC;AAC5C,CAAC,CAAC;;AAEF;AACA,MAAMC,IAAI,GAAGZ,OAAO,CAACC,GAAG,CAACW,IAAI,IAAI,IAAI;AACrC7B,GAAG,CAAC8B,MAAM,CAACD,IAAI,EAAE,MAAM;EACrBf,OAAO,CAACC,GAAG,CAAC,gCAAgCc,IAAI,EAAE,CAAC;AACrD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}