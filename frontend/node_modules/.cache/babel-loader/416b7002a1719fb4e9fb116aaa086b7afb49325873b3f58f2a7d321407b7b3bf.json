{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Bookmyhostel\\\\frontend\\\\src\\\\components\\\\OwnerLogin.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport \"../styles/OwnerLogin.css\"; // Ensure correct path\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OwnerLogin = () => {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n  const handleLogin = async e => {\n    e.preventDefault(); // Prevent default form submission\n    const express = require(\"express\");\n    const multer = require(\"multer\");\n    const uploads = multer({\n      dest: \"uploads/\"\n    });\n    const bcrypt = require(\"bcryptjs\");\n    const jwt = require(\"jsonwebtoken\");\n    const dotenv = require(\"dotenv\");\n    /*const {\r\n      registerOwner,\r\n      ownerLogin,\r\n      getAllOwners,\r\n      getOwnerById,\r\n      deleteOwner\r\n    } = require(\"../controllers/OwnerController\");*/\n    const path = require(\"path\");\n    dotenv.config();\n    const Owner = require(\"../models/Owner\");\n    const router = express.Router();\n    const fs = require(\"fs\");\n\n    // Ensure 'uploads' folder exists\n    const uploadDir = path.join(__dirname, \"../uploads\");\n    if (!fs.existsSync(uploadDir)) {\n      fs.mkdirSync(uploadDir);\n      console.log(\"📂 'uploads' folder created.\");\n    }\n\n    // Configure Multer for file uploads\n    const storage = multer.diskStorage({\n      destination: (req, file, cb) => {\n        cb(null, uploadDir); // Ensure the folder exists\n      },\n      filename: (req, file, cb) => {\n        cb(null, Date.now() + \"-\" + file.originalname);\n      }\n    });\n    const upload = multer({\n      storage,\n      fileFilter: (req, file, cb) => {\n        if (file.mimetype === \"application/pdf\") {\n          cb(null, true);\n        } else {\n          cb(new Error(\"Only PDF files are allowed\"), false);\n        }\n      }\n    });\n    router.post(\"/signup\", upload.single(\"licenseFile\"), async (req, res) => {\n      console.log(\"Owner registration route hit\");\n      try {\n        const {\n          fullName,\n          email,\n          contact,\n          password,\n          confirmPassword,\n          hostelName,\n          hostelAddress\n        } = req.body;\n\n        // Validate required fields\n        if (!fullName || !email || !contact || !password || !confirmPassword || !hostelName || !hostelAddress) {\n          return res.status(400).json({\n            message: \"All fields are required\"\n          });\n        }\n\n        // Check if passwords match\n        if (password !== confirmPassword) {\n          return res.status(400).json({\n            message: \"Passwords do not match\"\n          });\n        }\n\n        // Check if the owner already exists\n        const existingOwner = await Owner.findOne({\n          email\n        });\n        if (existingOwner) {\n          return res.status(400).json({\n            message: \"Owner already registered with this email\"\n          });\n        }\n\n        // Validate file upload\n        if (!req.file) {\n          return res.status(400).json({\n            message: \"License file is required\"\n          });\n        }\n\n        // Hash the password before saving to the database\n        const hashedPassword = await bcrypt.hash(password, 10);\n\n        // Create a new owner\n        const newOwner = new Owner({\n          fullName,\n          email,\n          contact,\n          password: hashedPassword,\n          hostelName,\n          hostelAddress,\n          licenseFile: req.file.filename // Save the uploaded file name\n        });\n\n        // Save the owner to the database\n        await newOwner.save();\n        res.status(201).json({\n          message: \"Owner registered successfully!\"\n        });\n      } catch (error) {\n        console.error(\"Error registering owner:\", error);\n        res.status(500).json({\n          message: \"Server error. Please try again.\"\n        });\n      }\n    });\n\n    // 🛠 Owner Registration Route with File Upload\n    /*router.post(\"/signup\", upload.single(\"licenseFile\"), async (req, res) => {\r\n      console.log(\"File uploaded:\", req.file);\r\n      try {\r\n        console.log(\"Received body:\", req.body); \r\n        const { fullName, email, contact, password, confirmPassword, hostelName, hostelAddress } = req.body;\r\n    \r\n        if (password !== confirmPassword) {\r\n          return res.status(400).json({ message: \"Passwords do not match\" });\r\n        }\r\n         // ✅ Check if email already exists\r\n         const existingOwner = await Owner.findOne({ email });\r\n         if (existingOwner) {\r\n           return res.status(400).json({ message: \"Email already registered\" });\r\n         }\r\n    \r\n        // File Upload Validation\r\n        if (!req.file) {\r\n          return res.status(400).json({ message: \"License file is required\" });\r\n        }\r\n    \r\n    \r\n        // ✅ Hash password before saving\r\n        const hashedPassword = await bcrypt.hash(password, 10);\r\n    \r\n        const newOwner = new Owner({\r\n          fullName,\r\n          email,\r\n          contact,\r\n          hostelName,\r\n          hostelAddress,\r\n          password: hashedPassword,\r\n          licenseFile: req.file.filename // Save file path in database\r\n        });\r\n    \r\n        await newOwner.save();\r\n        res.status(201).json({ message: \"Owner registered successfully!\" });\r\n      } catch (error) {\r\n        console.error(\"Signup Error:\", error);\r\n        res.status(500).json({ message: \"Signup failed. Try again.\" });\r\n      }\r\n    });*/\n\n    // 🔑 Owner Login Route\n    /*router.post(\"/login\", async (req, res) => {\r\n      const { email, password } = req.body;\r\n    \r\n      try {\r\n        const owner = await Owner.findOne({ email });\r\n    \r\n        if (!owner) {\r\n          return res.status(400).json({ message: \"Invalid credentials (Email not found)\" });\r\n        }\r\n        console.log(\"🔹 Owner found:\", owner);\r\n    \r\n        // ✅ Compare hashed password\r\n        //const isMatch = await bcrypt.compare(password, owner.password);\r\n        if (!isMatch) {\r\n          //return res.status(400).json({ message: \"Invalid credentials (Password incorrect)\" });\r\n        }\r\n    \r\n        // ✅ Generate JWT Token\r\n        const token = jwt.sign({ id: owner._id }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n    \r\n        //res.json({ token, ownerId: owner._id });\r\n      } catch (error) {\r\n        //res.status(500).json({ message: \"Server error\" });\r\n      }\r\n    });*/\n    router.post(\"/login\", async (req, res) => {\n      console.log(\"Login route hit\"); // Debug log\n\n      try {\n        const {\n          email,\n          password\n        } = req.body;\n        console.log(\"Request body:\", req.body); // Log the incoming data\n\n        // Validate input fields\n        if (!email || !password) {\n          return res.status(400).json({\n            message: \"All fields are required\"\n          });\n        }\n\n        // Check if user exists in the database\n        const owner = await Owner.findOne({\n          email\n        });\n        if (!owner) {\n          return res.status(400).json({\n            message: \"Invalid email or password\"\n          });\n        }\n        console.log(\"🔹 Owner found:\", owner);\n\n        // Compare the hashed password\n        const isPasswordValid = await bcrypt.compare(password, owner.password);\n        if (!isPasswordValid) {\n          return res.status(400).json({\n            message: \"Invalid email or password\"\n          });\n        }\n\n        // Generate JWT Token for authentication\n        //const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\n\n        // Send the success response with user details (excluding password)\n        //const { password: _, ...userWithoutPassword } = user.toObject(); // Exclude password from response\n        res.status(200).json({\n          message: \"Login successful\",\n          owner\n        });\n      } catch (error) {\n        console.error(\"Error in /login route:\", error);\n        res.status(500).json({\n          message: \"Server error\"\n        });\n      }\n    });\n    module.exports = router;\n    const trimmedEmail = email.trim();\n    const trimmedPassword = password.trim();\n    console.log(\"Sending Data:\", {\n      email: trimmedEmail,\n      password: trimmedPassword\n    });\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/owners/login\", {\n        email: trimmedEmail,\n        password: trimmedPassword\n      });\n\n      /*method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email: trimmedEmail, password: trimmedPassword }),\r\n      });*/\n\n      //const data = await response.json();\n      console.log(\"🔹 Response Data:\", response.data);\n\n      /*if (!response.ok) {\r\n        setError(data.message || \"Login failed. Please try again.\");\r\n        return;\r\n      }\r\n        if (!data.token) {\r\n        setError(\"Login successful, but no token received.\");\r\n        return;\r\n      }*/\n\n      if (response.status !== 200) {\n        setError(response.data.message || \"Login failed. Please try again.\");\n        return;\n      }\n      if (!response.data.token) {\n        setError(\"Login successful, but no token received.\");\n        return;\n      }\n\n      // Store token and owner ID in local storage\n      localStorage.setItem(\"ownerToken\", data.token);\n      localStorage.setItem(\"ownerId\", data.ownerId);\n\n      // Redirect to Owner Dashboard\n      navigate(\"/owner-dashboard\");\n    } catch (error) {\n      console.error(\"❌ Error:\", error);\n      setError(\"An error occurred. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"owner-login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Owner Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 19\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleLogin,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Enter your email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Enter your password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/forgot-password\",\n        className: \"forgot-password\",\n        children: \"Forgot Password?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"signup-link\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Don't have an account?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/owner-signup\",\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this);\n};\n_s(OwnerLogin, \"Ktx5ktSKAplPJrsY5gRTpmAHqe0=\", false, function () {\n  return [useNavigate];\n});\n_c = OwnerLogin;\nexport default OwnerLogin;\nvar _c;\n$RefreshReg$(_c, \"OwnerLogin\");","map":{"version":3,"names":["React","useState","Link","useNavigate","axios","jsxDEV","_jsxDEV","OwnerLogin","_s","email","setEmail","password","setPassword","error","setError","navigate","handleLogin","e","preventDefault","express","require","multer","uploads","dest","bcrypt","jwt","dotenv","path","config","Owner","router","Router","fs","uploadDir","join","__dirname","existsSync","mkdirSync","console","log","storage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","upload","fileFilter","mimetype","Error","post","single","res","fullName","contact","confirmPassword","hostelName","hostelAddress","body","status","json","message","existingOwner","findOne","hashedPassword","hash","newOwner","licenseFile","save","owner","isPasswordValid","compare","module","exports","trimmedEmail","trim","trimmedPassword","response","data","token","localStorage","setItem","ownerId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","href","to","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/Bookmyhostel/frontend/src/components/OwnerLogin.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport \"../styles/OwnerLogin.css\"; // Ensure correct path\r\nimport axios from \"axios\";\r\n\r\nconst OwnerLogin = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault(); // Prevent default form submission\r\n    const express = require(\"express\");\r\nconst multer = require(\"multer\");\r\nconst uploads = multer({ dest: \"uploads/\" });\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst dotenv = require(\"dotenv\");\r\n/*const {\r\n  registerOwner,\r\n  ownerLogin,\r\n  getAllOwners,\r\n  getOwnerById,\r\n  deleteOwner\r\n} = require(\"../controllers/OwnerController\");*/\r\nconst path = require(\"path\");\r\ndotenv.config();\r\nconst Owner = require(\"../models/Owner\");\r\n\r\nconst router = express.Router();\r\nconst fs = require(\"fs\");\r\n\r\n// Ensure 'uploads' folder exists\r\nconst uploadDir = path.join(__dirname, \"../uploads\");\r\nif (!fs.existsSync(uploadDir)) {\r\n  fs.mkdirSync(uploadDir);\r\n  console.log(\"📂 'uploads' folder created.\");\r\n}\r\n\r\n\r\n// Configure Multer for file uploads\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null,uploadDir); // Ensure the folder exists\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, Date.now() + \"-\" + file.originalname);\r\n  }\r\n});\r\n\r\n\r\nconst upload = multer({ \r\n  storage, \r\n  fileFilter: (req, file, cb) => {\r\n    if (file.mimetype === \"application/pdf\") {\r\n      cb(null, true);\r\n    } else {\r\n      cb(new Error(\"Only PDF files are allowed\"), false);\r\n    }\r\n  }\r\n});\r\n\r\nrouter.post(\"/signup\", upload.single(\"licenseFile\"), async (req, res) => {\r\n  console.log(\"Owner registration route hit\");\r\n  try {\r\n    const { fullName, email, contact, password, confirmPassword, hostelName, hostelAddress } = req.body;\r\n\r\n    // Validate required fields\r\n    if (!fullName || !email || !contact || !password || !confirmPassword || !hostelName || !hostelAddress) {\r\n      return res.status(400).json({ message: \"All fields are required\" });\r\n    }\r\n\r\n    // Check if passwords match\r\n    if (password !== confirmPassword) {\r\n      return res.status(400).json({ message: \"Passwords do not match\" });\r\n    }\r\n\r\n    // Check if the owner already exists\r\n    const existingOwner = await Owner.findOne({ email });\r\n    if (existingOwner) {\r\n      return res.status(400).json({ message: \"Owner already registered with this email\" });\r\n    }\r\n\r\n    // Validate file upload\r\n    if (!req.file) {\r\n      return res.status(400).json({ message: \"License file is required\" });\r\n    }\r\n\r\n    // Hash the password before saving to the database\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Create a new owner\r\n    const newOwner = new Owner({\r\n      fullName,\r\n      email,\r\n      contact,\r\n      password: hashedPassword,\r\n      hostelName,\r\n      hostelAddress,\r\n      licenseFile: req.file.filename, // Save the uploaded file name\r\n    });\r\n\r\n    // Save the owner to the database\r\n    await newOwner.save();\r\n    res.status(201).json({ message: \"Owner registered successfully!\" });\r\n  } catch (error) {\r\n    console.error(\"Error registering owner:\", error);\r\n    res.status(500).json({ message: \"Server error. Please try again.\" });\r\n  }\r\n});\r\n\r\n\r\n// 🛠 Owner Registration Route with File Upload\r\n/*router.post(\"/signup\", upload.single(\"licenseFile\"), async (req, res) => {\r\n  console.log(\"File uploaded:\", req.file);\r\n  try {\r\n    console.log(\"Received body:\", req.body); \r\n    const { fullName, email, contact, password, confirmPassword, hostelName, hostelAddress } = req.body;\r\n\r\n    if (password !== confirmPassword) {\r\n      return res.status(400).json({ message: \"Passwords do not match\" });\r\n    }\r\n     // ✅ Check if email already exists\r\n     const existingOwner = await Owner.findOne({ email });\r\n     if (existingOwner) {\r\n       return res.status(400).json({ message: \"Email already registered\" });\r\n     }\r\n\r\n    // File Upload Validation\r\n    if (!req.file) {\r\n      return res.status(400).json({ message: \"License file is required\" });\r\n    }\r\n\r\n\r\n    // ✅ Hash password before saving\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    const newOwner = new Owner({\r\n      fullName,\r\n      email,\r\n      contact,\r\n      hostelName,\r\n      hostelAddress,\r\n      password: hashedPassword,\r\n      licenseFile: req.file.filename // Save file path in database\r\n    });\r\n\r\n    await newOwner.save();\r\n    res.status(201).json({ message: \"Owner registered successfully!\" });\r\n  } catch (error) {\r\n    console.error(\"Signup Error:\", error);\r\n    res.status(500).json({ message: \"Signup failed. Try again.\" });\r\n  }\r\n});*/\r\n\r\n// 🔑 Owner Login Route\r\n/*router.post(\"/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const owner = await Owner.findOne({ email });\r\n\r\n    if (!owner) {\r\n      return res.status(400).json({ message: \"Invalid credentials (Email not found)\" });\r\n    }\r\n    console.log(\"🔹 Owner found:\", owner);\r\n\r\n    // ✅ Compare hashed password\r\n    //const isMatch = await bcrypt.compare(password, owner.password);\r\n    if (!isMatch) {\r\n      //return res.status(400).json({ message: \"Invalid credentials (Password incorrect)\" });\r\n    }\r\n\r\n    // ✅ Generate JWT Token\r\n    const token = jwt.sign({ id: owner._id }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n\r\n    //res.json({ token, ownerId: owner._id });\r\n  } catch (error) {\r\n    //res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});*/\r\nrouter.post(\"/login\", async (req, res) => {\r\n  console.log(\"Login route hit\"); // Debug log\r\n\r\n  try {\r\n    const { email, password } = req.body;\r\n    console.log(\"Request body:\", req.body); // Log the incoming data\r\n\r\n    // Validate input fields\r\n    if (!email || !password) {\r\n      return res.status(400).json({ message: \"All fields are required\" });\r\n    }\r\n\r\n    // Check if user exists in the database\r\n    const owner = await Owner.findOne({ email });\r\n    if (!owner) {\r\n      return res.status(400).json({ message: \"Invalid email or password\" });\r\n    }\r\n    console.log(\"🔹 Owner found:\", owner);\r\n\r\n    // Compare the hashed password\r\n    const isPasswordValid = await bcrypt.compare(password, owner.password);\r\n    if (!isPasswordValid) {\r\n      return res.status(400).json({ message: \"Invalid email or password\" });\r\n    }\r\n\r\n    // Generate JWT Token for authentication\r\n    //const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: \"1h\" });\r\n\r\n    // Send the success response with user details (excluding password)\r\n    //const { password: _, ...userWithoutPassword } = user.toObject(); // Exclude password from response\r\n    res.status(200).json({\r\n      message: \"Login successful\",\r\n      owner\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"Error in /login route:\", error);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n\r\n\r\nmodule.exports = router;\r\n    const trimmedEmail = email.trim();\r\n    const trimmedPassword = password.trim();\r\n    console.log(\"Sending Data:\", { email: trimmedEmail, password: trimmedPassword });\r\n    \r\n\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/owners/login\", {\r\n        email:trimmedEmail,\r\n        password:trimmedPassword,\r\n    });\r\n\r\n    \r\n\r\n\r\n        /*method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email: trimmedEmail, password: trimmedPassword }),\r\n      });*/\r\n\r\n      //const data = await response.json();\r\n      console.log(\"🔹 Response Data:\", response.data);\r\n\r\n      /*if (!response.ok) {\r\n        setError(data.message || \"Login failed. Please try again.\");\r\n        return;\r\n      }\r\n\r\n      if (!data.token) {\r\n        setError(\"Login successful, but no token received.\");\r\n        return;\r\n      }*/\r\n\r\n        if (response.status !== 200) {\r\n          setError(response.data.message || \"Login failed. Please try again.\");\r\n          return;\r\n        }\r\n        \r\n        if (!response.data.token) {\r\n          setError(\"Login successful, but no token received.\");\r\n          return;\r\n        }\r\n\r\n\r\n\r\n      // Store token and owner ID in local storage\r\n      localStorage.setItem(\"ownerToken\", data.token);\r\n      localStorage.setItem(\"ownerId\", data.ownerId);\r\n\r\n      // Redirect to Owner Dashboard\r\n      navigate(\"/owner-dashboard\");\r\n\r\n    } catch (error) {\r\n      console.error(\"❌ Error:\", error);\r\n      setError(\"An error occurred. Please try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"owner-login-container\">\r\n      <div className=\"login-form\">\r\n        <h2>Owner Login</h2>\r\n\r\n        {error && <p className=\"error-message\">{error}</p>} {/* Display error messages */}\r\n\r\n        <form onSubmit={handleLogin}>\r\n          <label>Email</label>\r\n          <input \r\n            type=\"email\"\r\n            placeholder=\"Enter your email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            required \r\n          />\r\n\r\n          <label>Password</label>\r\n          <input \r\n            type=\"password\"\r\n            placeholder=\"Enter your password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            required\r\n          />\r\n\r\n          <button type=\"submit\">Login</button>\r\n        </form>\r\n\r\n        <a href=\"/forgot-password\" className=\"forgot-password\">\r\n          Forgot Password?\r\n        </a>\r\n\r\n        <div className=\"signup-link\">\r\n          <p>Don't have an account?</p>\r\n          <Link to=\"/owner-signup\">Sign Up</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OwnerLogin;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}